{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"https://wzes.github.io","root":"/"},"pages":[],"posts":[{"title":"test_my_site","slug":"test-my-site","date":"2019-09-01T12:36:39.000Z","updated":"2019-09-01T12:36:39.995Z","comments":true,"path":"2019/09/01/test-my-site/","link":"","permalink":"https://wzes.github.io/2019/09/01/test-my-site/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-09-01T12:32:35.821Z","updated":"2019-09-01T12:32:35.821Z","comments":true,"path":"2019/09/01/hello-world/","link":"","permalink":"https://wzes.github.io/2019/09/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new \"My New Post\" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"","slug":"JS-Array-的-1-个属性，35-个方法","date":"2019-09-01T12:05:58.000Z","updated":"2019-09-01T12:05:58.000Z","comments":true,"path":"2019/09/01/JS-Array-的-1-个属性，35-个方法/","link":"","permalink":"https://wzes.github.io/2019/09/01/JS-Array-的-1-个属性，35-个方法/","excerpt":"","text":"前言 这周呢，彻底学习一下 Array 的所有方法。学习地址 MDN，里面还有各个函数实现的源码！数组作为 JavaScript 的一种类型，与 Number，Boolean，Null，Undefined，Object，Symbol 齐驱并驾。了解 Array 的所有方法，能帮助我们最快找到适合自己的函数。 Create an Array 创建一个数组很简单，直接赋值，或者使用 [] 创建空数组 12var fruits = [&apos;Apple&apos;, &apos;Banana&apos;];console.log(fruits.length); // 2 Properties Array.length 123456var clothing = [&apos;shoes&apos;, &apos;shirts&apos;, &apos;socks&apos;, &apos;sweaters&apos;];console.log(clothing.length);// expected output: 4var array = new Array(2) Methods 首先看一下 Array 的三个静态方法 #####1. Array.from() Array.from() 方法从类似数组或可迭代的对象创建一个新的，浅拷贝的 Array 实例，或者从 {length: 3} 对象中创建固定长度的 undefined 数组 Array.from(arrayLike[, mapFn[, thisArg]]) 12345678console.log(Array.from(&apos;foo&apos;));// expected output: Array [&quot;f&quot;, &quot;o&quot;, &quot;o&quot;]console.log(Array.from([1, 2, 3], x =&gt; x + x));// expected output: Array [2, 4, 6]console.log(Array.from(&#123;length: 3&#125;));// expected output: Array [undefined, undefined, undefined] 2. Array.isArray() Array.isArray() 方法确定传递的值是否为 Array，由于 typeof Array = ‘object’ ，所以判断是否是一个数组使用 isArray 才可以 Array.isArray(value) 1234Array.isArray([1, 2, 3]); // trueArray.isArray(&#123;foo: 123&#125;); // falseArray.isArray(&apos;foobar&apos;); // falseArray.isArray(undefined); // false 3. Array.of() Array.of() 方法从可变数量的参数创建一个新的Array实例，无论参数的数量或类型如何 注意它与构造函数的不同之处 Array.of(element0[, element1[, …[, elementN]]]) 12345Array.of(7); // [7] Array.of(1, 2, 3); // [1, 2, 3]Array(7); // array of 7 empty slotsArray(1, 2, 3); // [1, 2, 3] 接下来看 Array 的对象方法 4. Array.prototype.concat() concat() 方法用于合并两个或多个数组。 此方法不会更改现有数组，而是返回一个新数组 var new_array = old_array.concat([value1[, value2[, …[, valueN]]]]) 12345var array1 = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];var array2 = [&apos;d&apos;, &apos;e&apos;, &apos;f&apos;];console.log(array1.concat(array2));// expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;] 5. Array.prototype.copyWithin() copyWithin() 方法浅析将数组的一部分复制到同一数组中的另一个位置，并返回它而不修改其长度 arr.copyWithin(target[, start[, end]]) 123456789var array1 = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;];// copy to index 0 the element at index 3console.log(array1.copyWithin(0, 3, 4));// expected output: Array [&quot;d&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]// copy to index 1 all elements from index 3 to the endconsole.log(array1.copyWithin(1, 3));// expected output: Array [&quot;d&quot;, &quot;d&quot;, &quot;e&quot;, &quot;d&quot;, &quot;e&quot;] 6. Array.prototype.entries() entries() 方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。 array.entries() 1234567891011121314151617181920var array1 = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];var iterator1 = array1.entries();console.log(iterator1.next().value);// expected output: Array [0, &quot;a&quot;]console.log(iterator1.next().value);// expected output: Array [1, &quot;b&quot;]// 使用 for of 遍历var a = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];var iterator = a.entries();for (let e of iterator) &#123; console.log(e);&#125;// [0, &apos;a&apos;]// [1, &apos;b&apos;]// [2, &apos;c&apos;] 7. Array.prototype.every() every() 方法测试数组中的所有元素是否都通过了由提供的函数实现的测试。 它返回一个布尔值 arr.every(callback(element[, index[, array]])[, thisArg]) 12345678function isBelowThreshold(currentValue) &#123; return currentValue &lt; 40;&#125;var array1 = [1, 30, 39, 29, 10, 13];console.log(array1.every(isBelowThreshold));// expected output: true 8. Array.prototype.fill() fill() 方法使用静态值从开始索引（默认为零）到结束索引（默认数组长度）填充（修改）数组的所有元素。 它返回修改后的数组，原数组会改变～ arr.fill(value[, start[, end]]) 123456789101112 var array1 = [1, 2, 3, 4];// fill with 0 from position 2 until position 4console.log(array1.fill(0, 2, 4));// expected output: [1, 2, 0, 0]// fill with 5 from position 1console.log(array1.fill(5, 1));// expected output: [1, 5, 5, 5]console.log(array1.fill(6));// expected output: [6, 6, 6, 6] 9. Array.prototype.filter() filter() 方法创建一个新数组，其中包含所有传递由提供的函数实现的测试的元素 var newArray = arr.filter(callback(element[, index[, array]])[, thisArg]) 123456var words = [&apos;spray&apos;, &apos;limit&apos;, &apos;elite&apos;, &apos;exuberant&apos;, &apos;destruction&apos;, &apos;present&apos;];const result = words.filter(word =&gt; word.length &gt; 6);console.log(result);// expected output: Array [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;] 10. Array.prototype.find() find() 方法返回数组中第一个满足提供的测试函数的元素的值。 否则返回undefined arr.find(callback(element[, index[, array]])[, thisArg]) 12345678var array1 = [5, 12, 8, 130, 44];var found = array1.find(function(element) &#123; return element &gt; 10;&#125;);console.log(found);// expected output: 12 11. Array.prototype.findIndex() findIndex() 方法返回数组中第一个满足提供的测试函数的元素的索引。 否则，它返回-1，表示没有元素通过测试 arr.findIndex(callback(element[, index[, array]])[, thisArg]) 1234567var array1 = [5, 12, 8, 130, 44];function isLargeNumber(element) &#123; return element &gt; 13;&#125;console.log(array1.findIndex(isLargeNumber)); 12. Array.prototype.flat() flat() 方法创建一个新数组，所有子数组元素以递归方式连接到指定的深度。 var newArray = arr.flat([depth]); 123456789101112131415var arr1 = [1, 2, [3, 4]];arr1.flat(); // [1, 2, 3, 4]var arr2 = [1, 2, [3, 4, [5, 6]]];arr2.flat();// [1, 2, 3, 4, [5, 6]]var arr3 = [1, 2, [3, 4, [5, 6]]];arr3.flat(2);// [1, 2, 3, 4, 5, 6]var arr4 = [1, 2, [3, 4, [5, 6, [7, 8, [9, 10]]]]];arr4.flat(Infinity);// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 13. Array.prototype.flatMap() flatMap() 方法首先使用映射函数映射每个元素，然后将结果展平为新数组。 它与map（）后跟深度为1的flat（）相同，但flatMap（）通常非常有用，因为将两者合并到一个方法中效率稍高 var new_array = arr.flatMap(function callback(currentValue[, index[, array]]) { // return element for new_array }[, thisArg]) 1234567let arr1 = [&quot;it&apos;s Sunny in&quot;, &quot;&quot;, &quot;California&quot;];arr1.map(x =&gt; x.split(&quot; &quot;));// [[&quot;it&apos;s&quot;,&quot;Sunny&quot;,&quot;in&quot;],[&quot;&quot;],[&quot;California&quot;]]arr1.flatMap(x =&gt; x.split(&quot; &quot;));// [&quot;it&apos;s&quot;,&quot;Sunny&quot;,&quot;in&quot;, &quot;&quot;, &quot;California&quot;] 14. Array.prototype.forEach() forEach() 方法为每个数组元素执行一次提供的函数 arr.forEach(callback(currentValue [, index [, array]])[, thisArg]); 123456789var array1 = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];array1.forEach(function(element) &#123; console.log(element);&#125;);// expected output: &quot;a&quot;// expected output: &quot;b&quot;// expected output: &quot;c&quot; 15. Array.prototype.includes() includes() 方法确定数组是否在其条目中包含某个值，并在适当时返回true或false arr.includes(valueToFind[, fromIndex]) 123456789101112var array1 = [1, 2, 3];console.log(array1.includes(2));// expected output: truevar pets = [&apos;cat&apos;, &apos;dog&apos;, &apos;bat&apos;];console.log(pets.includes(&apos;cat&apos;));// expected output: trueconsole.log(pets.includes(&apos;at&apos;));// expected output: false 16. Array.prototype.indexOf() indexOf() 方法返回可在数组中找到给定元素的第一个索引，如果不存在则返回-1 arr.indexOf(searchElement[, fromIndex]) 1234567891011var beasts = [&apos;ant&apos;, &apos;bison&apos;, &apos;camel&apos;, &apos;duck&apos;, &apos;bison&apos;];console.log(beasts.indexOf(&apos;bison&apos;));// expected output: 1// start from index 2console.log(beasts.indexOf(&apos;bison&apos;, 2));// expected output: 4console.log(beasts.indexOf(&apos;giraffe&apos;));// expected output: -1 17. Array.prototype.join() join() 方法通过连接数组（或类数组对象）中的所有元素（用逗号或指定的分隔符字符串分隔）来创建并返回一个新字符串。 如果数组只有一个项目，那么将返回该项目而不使用分隔符 arr.join([separator]) 12345678910ar elements = [&apos;Fire&apos;, &apos;Air&apos;, &apos;Water&apos;];console.log(elements.join());// expected output: &quot;Fire,Air,Water&quot;console.log(elements.join(&apos;&apos;));// expected output: &quot;FireAirWater&quot;console.log(elements.join(&apos;-&apos;));// expected output: &quot;Fire-Air-Water&quot; 18. Array.prototype.keys() keys() 方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键 123456var array1 = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];var iterator = array1.keys(); for (let key of iterator) &#123; console.log(key); // expected output: 0 1 2&#125; 19. Array.prototype.lastIndexOf() lastIndexOf() 方法返回可在数组中找到给定元素的最后一个索引，如果不存在则返回-1。 从fromIndex开始向后搜索数组 arr.lastIndexOf(searchElement[, fromIndex]) 1234567var animals = [&apos;Dodo&apos;, &apos;Tiger&apos;, &apos;Penguin&apos;, &apos;Dodo&apos;];console.log(animals.lastIndexOf(&apos;Dodo&apos;));// expected output: 3console.log(animals.lastIndexOf(&apos;Penguin&apos;, 1));// expected output: -1 20. Array.prototype.map() map() 方法创建一个新数组，其结果是在调用数组中的每个元素上调用提供的函数 var new_array = arr.map(function callback(currentValue[, index[, array]]) { // Return element for new_array }[, thisArg]) 1234567var array1 = [1, 4, 9, 16];// pass a function to mapconst map1 = array1.map(x =&gt; x * 2);console.log(map1);// expected output: Array [2, 8, 18, 32] 21. Array.prototype.pop() pop() 方法从数组中删除最后一个元素并返回该元素。 此方法更改数组的长度。 arr.pop() 123456789101112var plants = [&apos;broccoli&apos;, &apos;cauliflower&apos;, &apos;cabbage&apos;, &apos;kale&apos;, &apos;tomato&apos;];console.log(plants.pop());// expected output: &quot;tomato&quot;console.log(plants);// expected output: Array [&quot;broccoli&quot;, &quot;cauliflower&quot;, &quot;cabbage&quot;, &quot;kale&quot;]plants.pop();console.log(plants);// expected output: Array [&quot;broccoli&quot;, &quot;cauliflower&quot;, &quot;cabbage&quot;] 22. Array.prototype.push() push() 方法将一个或多个元素添加到数组的末尾，并返回数组的新长度 arr.push(element1[, …[, elementN]]) 123456789101112var animals = [&apos;pigs&apos;, &apos;goats&apos;, &apos;sheep&apos;];console.log(animals.push(&apos;cows&apos;));// expected output: 4console.log(animals);// expected output: Array [&quot;pigs&quot;, &quot;goats&quot;, &quot;sheep&quot;, &quot;cows&quot;]animals.push(&apos;chickens&apos;);console.log(animals);// expected output: Array [&quot;pigs&quot;, &quot;goats&quot;, &quot;sheep&quot;, &quot;cows&quot;, &quot;chickens&quot;] 23. Array.prototype.reduce() reduce() 方法在数组的每个元素上执行reducer函数（您提供），从而产生单个输出值 arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue]) 12345678910const array1 = [1, 2, 3, 4];const reducer = (accumulator, currentValue) =&gt; accumulator + currentValue;// 1 + 2 + 3 + 4console.log(array1.reduce(reducer));// expected output: 10// 5 + 1 + 2 + 3 + 4console.log(array1.reduce(reducer, 5));// expected output: 15 24. Array.prototype.reduceRight() reduceRight() 方法对累加器和数组的每个值（从右到左）应用函数以将其减少为单个值 arr.reduceRight(callback(accumulator, currentValue[, index[, array]])[, initialValue]) 123456const array1 = [[0, 1], [2, 3], [4, 5]].reduceRight( (accumulator, currentValue) =&gt; accumulator.concat(currentValue));console.log(array1);// expected output: Array [4, 5, 2, 3, 0, 1] 25. Array.prototype.reverse() reverse() 方法将数组反转到位。 第一个数组元素成为最后一个，最后一个数组元素成为第一个 a.reverse() 123456789101112var array1 = [&apos;one&apos;, &apos;two&apos;, &apos;three&apos;];console.log(&apos;array1: &apos;, array1);// expected output: Array [&apos;one&apos;, &apos;two&apos;, &apos;three&apos;]var reversed = array1.reverse(); console.log(&apos;reversed: &apos;, reversed);// expected output: Array [&apos;three&apos;, &apos;two&apos;, &apos;one&apos;]/* Careful: reverse is destructive. It also changesthe original array */ console.log(&apos;array1: &apos;, array1);// expected output: Array [&apos;three&apos;, &apos;two&apos;, &apos;one&apos;] 26. Array.prototype.shift() shift() 方法从数组中删除第一个元素并返回已删除的元素。 此方法更改数组的长度 arr.shift() 123456789var array1 = [1, 2, 3];var firstElement = array1.shift();console.log(array1);// expected output: Array [2, 3]console.log(firstElement);// expected output: 1 27. Array.prototype.slice() slice() 方法将数组的一部分的浅表副本返回到从头到尾选择的新数组对象（不包括结尾），其中begin和end表示该数组中项的索引。 原始数组不会被修改 arr.slice([begin[, end]]) 12345678910var animals = [&apos;ant&apos;, &apos;bison&apos;, &apos;camel&apos;, &apos;duck&apos;, &apos;elephant&apos;];console.log(animals.slice(2));// expected output: Array [&quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;]console.log(animals.slice(2, 4));// expected output: Array [&quot;camel&quot;, &quot;duck&quot;]console.log(animals.slice(1, 5));// expected output: Array [&quot;bison&quot;, &quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;] 28. # Array.prototype.some() some() 方法测试数组中是否至少有一个元素通过了由提供的函数实现的测试。 它返回一个布尔值 arr.some(callback(element[, index[, array]])[, thisArg]) 123456789var array = [1, 2, 3, 4, 5];var even = function(element) &#123; // checks whether an element is even return element % 2 === 0;&#125;;console.log(array.some(even));// expected output: true 29. Array.prototype.sort() sort() 方法对数组中的元素进行排序并返回已排序的数组。 默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的。 由于取决于实现，因此无法保证排序的时间和空间复杂性。 arr.sort([compareFunction]) 123456789var months = [&apos;March&apos;, &apos;Jan&apos;, &apos;Feb&apos;, &apos;Dec&apos;];months.sort();console.log(months);// expected output: Array [&quot;Dec&quot;, &quot;Feb&quot;, &quot;Jan&quot;, &quot;March&quot;]var array1 = [1, 30, 4, 21, 100000];array1.sort();console.log(array1);// expected output: Array [1, 100000, 21, 30, 4] 30. Array.prototype.splice() splice() 方法通过删除或替换现有元素和/或在适当位置添加新元素来更改数组的内容 var arrDeletedItems = array.splice(start[, deleteCount[, item1[, item2[, …]]]]) 12345678910var months = [&apos;Jan&apos;, &apos;March&apos;, &apos;April&apos;, &apos;June&apos;];months.splice(1, 0, &apos;Feb&apos;);// inserts at index 1console.log(months);// expected output: Array [&apos;Jan&apos;, &apos;Feb&apos;, &apos;March&apos;, &apos;April&apos;, &apos;June&apos;]months.splice(4, 1, &apos;May&apos;);// replaces 1 element at index 4console.log(months);// expected output: Array [&apos;Jan&apos;, &apos;Feb&apos;, &apos;March&apos;, &apos;April&apos;, &apos;May&apos;] 31. Array.prototype.unshift() unshift() 方法将一个或多个元素添加到数组的开头并返回数组的新长度 arr.unshift(element1[, …[, elementN]]) 1234567var array1 = [1, 2, 3];console.log(array1.unshift(4, 5));// expected output: 5console.log(array1);// expected output: Array [4, 5, 1, 2, 3] 32. Array.prototype.values() values() 方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的值 arr.values() 123456const array1 = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];const iterator = array1.values();for (const value of iterator) &#123; console.log(value); // expected output: &quot;a&quot; &quot;b&quot; &quot;c&quot;&#125; 33. Array.prototype.toLocaleString() toLocaleString() 方法返回表示数组元素的字符串。 使用toLocaleString方法将元素转换为字符串，并且这些字符串由特定于语言环境的字符串（例如逗号“，”）分隔 arr.toLocaleString([locales[, options]]); 123456var array1 = [1, &apos;a&apos;, new Date(&apos;21 Dec 1997 14:12:00 UTC&apos;)];var localeString = array1.toLocaleString(&apos;en&apos;, &#123;timeZone: &quot;UTC&quot;&#125;);console.log(localeString);// expected output: &quot;1,a,12/21/1997, 2:12:00 PM&quot;,// This assumes &quot;en&quot; locale and UTC timezone - your results may vary 34. Array.prototype.toString() toString() 方法返回表示指定数组及其元素的字符串 arr.toString() 1234var array1 = [1, 2, &apos;a&apos;, &apos;1a&apos;];console.log(array1.toString());// expected output: &quot;1,2,a,1a&quot; 35. Array.prototype@@iterator @@iterator 属性的初始值与values（）属性的初始值是相同的函数对象。 arrSymbol.iterator 12345678var arr = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;];var eArr = arr[Symbol.iterator]();// your browser must support for..of loop// and let-scoped variables in for loops// const and var could also be usedfor (let letter of eArr) &#123; console.log(letter);&#125;","categories":[],"tags":[]}]}